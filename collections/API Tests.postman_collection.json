{
	"info": {
		"_postman_id": "7b70c039-6fd6-42d2-ae38-ceea50d11608",
		"name": "API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34258162"
	},
	"item": [
		{
			"name": "Bibliotecas",
			"item": [
				{
					"name": "Crear una biblioteca válida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Test for response body properties",
									"pm.test(\"Response has an ID\", function () {",
									"    pm.expect(pm.response.json().id).to.exist;",
									"});",
									"pm.test(\"Response has a nombre\", function () {",
									"    pm.expect(pm.response.json().nombre).to.exist;",
									"});",
									"pm.test(\"Response has a direccion\", function () {",
									"    pm.expect(pm.response.json().direccion).to.exist;",
									"});",
									"pm.test(\"Response has a ciudad\", function () {",
									"    pm.expect(pm.response.json().ciudad).to.exist;",
									"});",
									"pm.test(\"Response has a horaApertura\", function () {",
									"    pm.expect(pm.response.json().horaApertura).to.exist;",
									"});",
									"pm.test(\"Response has a horaCierre\", function () {",
									"    pm.expect(pm.response.json().horaCierre).to.exist;",
									"});",
									"",
									"pm.collectionVariables.set(\"bibliotecaId\", pm.response.json().id)",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Biblioteca Central\",\n    \"direccion\": \"Calle 123\",\n    \"ciudad\": \"Bogotá\",\n    \"horaApertura\": \"08:00:00\",\n    \"horaCierre\": \"18:00:00\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/libraries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear una biblioteca inválida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Test for content type",
									"pm.test(\"Content-Type is present and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test for specific error messages",
									"pm.test(\"Error messages for nombre and direccion fields\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.message).to.eql([",
									"        \"nombre should not be empty\",",
									"        \"direccion should not be empty\",",
									"        \"ciudad should not be empty\",",
									"        \"La hora de apertura debe estar en formato HH:mm:ss\",",
									"        \"La hora de cierre debe estar en formato HH:mm:ss\"",
									"    ]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"\",\n    \"direccion\": \"\",\n    \"ciudad\": \"\",\n    \"horaApertura\": \"25:00:00\",\n    \"horaCierre\": \"99:00:00\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/libraries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear una biblioteca horario inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 412\", function () {",
									"  pm.expect(pm.response.code).to.equal(412);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Biblioteca Central\",\n    \"direccion\": \"Calle Central\",\n    \"ciudad\": \"Bogotá\",\n    \"horaApertura\": \"16:00:00\",\n    \"horaCierre\": \"07:00:00\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/libraries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener todas las bibliotecas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Test for response body properties",
									"const responseBody = pm.response.json();",
									"pm.test(\"Each library has an id, nombre, direccion, ciudad, horaApertura, horaCierre, and libros\", function () {",
									"    responseBody.forEach((library) => {",
									"        pm.expect(library).to.have.property('id');",
									"        pm.expect(library).to.have.property('nombre');",
									"        pm.expect(library).to.have.property('direccion');",
									"        pm.expect(library).to.have.property('ciudad');",
									"        pm.expect(library).to.have.property('horaApertura');",
									"        pm.expect(library).to.have.property('horaCierre');",
									"        pm.expect(library).to.have.property('libros');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener una biblioteca por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 100ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(100);",
									"});",
									"",
									"// Test for response body properties",
									"pm.test(\"Response body has id, nombre, direccion, ciudad, horaApertura, horaCierre, and libros\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.nombre).to.exist;",
									"    pm.expect(jsonData.direccion).to.exist;",
									"    pm.expect(jsonData.ciudad).to.exist;",
									"    pm.expect(jsonData.horaApertura).to.exist;",
									"    pm.expect(jsonData.horaCierre).to.exist;",
									"    pm.expect(jsonData.libros).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener una biblioteca por un ID que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/:invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								":invalid-id"
							],
							"variable": [
								{
									"key": "invalid-id",
									"value": "{{$randomUUID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar una biblioteca",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response schema for required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('nombre');",
									"    pm.expect(responseData).to.have.property('direccion');",
									"    pm.expect(responseData).to.have.property('ciudad');",
									"    pm.expect(responseData).to.have.property('horaApertura');",
									"    pm.expect(responseData).to.have.property('horaCierre');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Biblioteca Actualizada\",\n    \"direccion\": \"Nueva Calle\",\n    \"ciudad\": \"Medellín\",\n    \"horaApertura\": \"09:00:00\",\n    \"horaCierre\": \"17:00:00\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar una biblioteca con un ID que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"nombre\":\"Biblioteca Actualizada\",\"direccion\":\"Nueva Calle\",\"ciudad\":\"Medellín\",\"horaApertura\":\"09:00:00\",\"horaCierre\":\"17:00:00\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/libraries/:invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								":invalid-id"
							],
							"variable": [
								{
									"key": "invalid-id",
									"value": "{{$randomUUID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar una biblioteca por su ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 100ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(100);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar una biblioteca con un ID que no existe",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"invalid-id"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Libros",
			"item": [
				{
					"name": "Crear un libro válido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, titulo, autor, fechaPublicacion, and isbn\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('titulo');",
									"    pm.expect(responseData).to.have.property('autor');",
									"    pm.expect(responseData).to.have.property('fechaPublicacion');",
									"    pm.expect(responseData).to.have.property('isbn');",
									"});",
									"",
									"",
									"pm.test(\"FechaPublicacion is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.fechaPublicacion).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"ISBN is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.isbn).to.match(/^(97(8|9))?\\d{9}(\\d|X)$/);",
									"});",
									"",
									"pm.collectionVariables.set(\"libroId\",pm.response.json().id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"titulo\": \"Libro de Prueba\",\n    \"autor\": \"Autor Prueba\",\n    \"fechaPublicacion\": \"2020-01-01\",\n    \"isbn\": \"1900286181\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un libro inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message, error, and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('error');",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"});",
									"",
									"",
									"// Test for specific error messages",
									"pm.test(\"Error messages for titulo, autor and isbn fields\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.message).to.eql([",
									"        \"titulo should not be empty\",",
									"        \"autor should not be empty\",",
									"        \"isbn must be a valid ISBN-10 or ISBN-13\",",
									"        \"isbn should not be empty\"",
									"    ]);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Content-Type header is 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"titulo\": \"\",\n    \"autor\": \"\",\n    \"fechaPublicacion\": \"2100-01-01\",\n    \"isbn\": \"\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un libro fecha publicación inválida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 412\", function () {",
									"    pm.expect(pm.response.code).to.equal(412);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"titulo\": \"Libro de Prueba\",\n    \"autor\": \"Actor de prueba\",\n    \"fechaPublicacion\": \"2036-01-01\",\n    \"isbn\": \"9786228723280\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener todos los libros",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function(book) {",
									"        pm.expect(book.id).to.exist;",
									"        pm.expect(book.titulo).to.exist;",
									"        pm.expect(book.autor).to.exist;",
									"        pm.expect(book.fechaPublicacion).to.exist;",
									"        pm.expect(book.isbn).to.exist;",
									"        pm.expect(book.bibliotecas).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Date is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(book) {",
									"        pm.expect(book.fechaPublicacion).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un libro por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.titulo).to.exist;",
									"    pm.expect(responseData.autor).to.exist;",
									"    pm.expect(responseData.fechaPublicacion).to.exist;",
									"    pm.expect(responseData.isbn).to.exist;",
									"    pm.expect(responseData.bibliotecas).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Date is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.fechaPublicacion).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"});",
									"",
									"",
									"pm.test(\"ISBN is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.isbn).to.match(/^(97(8|9))?\\d{9}(\\d|X)$/);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/{{libroId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"{{libroId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un libro por un ID que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/:invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								":invalid-id"
							],
							"variable": [
								{
									"key": "invalid-id",
									"value": "{{$randomUUID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar un libro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, titulo, autor, fechaPublicacion, and isbn\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist;",
									"  pm.expect(responseData.titulo).to.exist;",
									"  pm.expect(responseData.autor).to.exist;",
									"  pm.expect(responseData.fechaPublicacion).to.exist;",
									"  pm.expect(responseData.isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Date is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.fechaPublicacion).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"titulo\": \"Libro Actualizado\",\n    \"autor\": \"Autor Actualizado\",\n    \"fechaPublicacion\": \"2019-01-01\",\n    \"isbn\": \"9788557529731\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/books/{{libroId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"{{libroId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar un libro con un ID que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"titulo\":\"Libro Actualizado\",\"autor\":\"Autor Actualizado\",\"fechaPublicacion\":\"2019-01-01\",\"isbn\":\"0987654321\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/books/:invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								":invalid-id"
							],
							"variable": [
								{
									"key": "invalid-id",
									"value": "{{$randomUUID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un libro por su ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/{{libroId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"{{libroId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un libro con un ID que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.statusCode).to.exist;",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/:invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								":invalid-id"
							],
							"variable": [
								{
									"key": "invalid-id",
									"value": "{{$randomUUID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bibliotecas-Libros",
			"item": [
				{
					"name": "Asociar un libro a una biblioteca",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.nombre).to.exist;",
									"    pm.expect(responseData.direccion).to.exist;",
									"    pm.expect(responseData.ciudad).to.exist;",
									"    pm.expect(responseData.horaApertura).to.exist;",
									"    pm.expect(responseData.horaCierre).to.exist;",
									"    pm.expect(responseData.libros).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Date of publicacion is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  responseData.libros.forEach(function(libro) {",
									"    pm.expect(libro.fechaPublicacion).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Libros array is present and has expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.libros).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.libros).to.have.lengthOf.at.least(1, \"Libros array should have at least one element\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}/books/{{libroId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}",
								"books",
								"{{libroId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Asociar un libro que no existe a una biblioteca",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}/books/:invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}",
								"books",
								":invalid-id"
							],
							"variable": [
								{
									"key": "invalid-id",
									"value": "{{$randomUUID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener todos los libros que están en una biblioteca",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function(book) {",
									"        pm.expect(book.id).to.exist;",
									"        pm.expect(book.titulo).to.exist;",
									"        pm.expect(book.autor).to.exist;",
									"        pm.expect(book.fechaPublicacion).to.exist;",
									"        pm.expect(book.isbn).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Date is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(book) {",
									"        pm.expect(book.fechaPublicacion).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un libro asociado a una biblioteca",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.titulo).to.exist;",
									"    pm.expect(responseData.autor).to.exist;",
									"    pm.expect(responseData.fechaPublicacion).to.exist;",
									"    pm.expect(responseData.isbn).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Date is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.fechaPublicacion).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"});",
									"",
									"",
									"pm.test(\"ISBN is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.isbn).to.match(/^(97(8|9))?\\d{9}(\\d|X)$/);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}/books/{{libroId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}",
								"books",
								"{{libroId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un libro que no esté asociado a una biblioteca",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}/books/:invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}",
								"books",
								":invalid-id"
							],
							"variable": [
								{
									"key": "invalid-id",
									"value": "{{$randomUUID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar los libros que están asociados a una biblioteca",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.nombre).to.exist;",
									"    pm.expect(responseData.direccion).to.exist;",
									"    pm.expect(responseData.ciudad).to.exist;",
									"    pm.expect(responseData.horaApertura).to.exist;",
									"    pm.expect(responseData.horaCierre).to.exist;",
									"    pm.expect(responseData.libros).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Date of publicacion is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  responseData.libros.forEach(function(libro) {",
									"    pm.expect(libro.fechaPublicacion).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Libros array is present and has expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.libros).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.libros).to.have.lengthOf.at.least(1, \"Libros array should have at least one element\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"id\":\"{{libroId}}\"}]"
						},
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar los libros asociados a una biblioteca, con un libro inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"id\":\"{{$randomUUID}}\"}]"
						},
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un libro previamente asociado a una biblioteca",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}/books/{{libroId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}",
								"books",
								"{{libroId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un libro que no estaba previamente asociado a una biblioteca",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/libraries/{{bibliotecaId}}/books/:invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"libraries",
								"{{bibliotecaId}}",
								"books",
								":invalid-id"
							],
							"variable": [
								{
									"key": "invalid-id",
									"value": "{{$randomUUID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1",
			"type": "default"
		},
		{
			"key": "bibliotecaId",
			"value": ""
		},
		{
			"key": "libroId",
			"value": ""
		}
	]
}